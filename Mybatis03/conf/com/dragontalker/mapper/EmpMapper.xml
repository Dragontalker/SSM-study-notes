<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.dragontalker.mapper.EmpMapper">

	<!-- 
		<sql id=""></sql>: 设置一段SQL片段, 即公共SQL, 可以被当前映射文件中所有的SQL语句所访问
		<include refid=""></include>: 访问某个SQL片段
	 -->
	<sql id="empColumns">
		select eid, ename, age, sex, did from emp 
	</sql>
	
	<!-- Emp getEmpByEid(String eid); -->
	<select id="getEmpByEid" resultType="Emp">
		<include refid="empColumns" /> where eid = #{eid}
	</select>

	<!-- 
		<if test=""></if>: 通过test表达式, 拼接SQL
		<where>: 添加where关键字, 同时去掉多余的and
		<trim>: 截取并拼接
		prefix: 在操作的SQL语句前加入某些内容
		suffix: 在操作的SQL语句后加入某些内容
		prefixOverrides: 把操作的SQL语句前的某些内容去掉
		suffixOverrides: 把操作的SQL语句后的某些内容去掉
	 -->

	<!-- List<Emp> getEmpListByMoreTJ(Emp emp); -->
	<!-- 多条件查询: 若页面中没有设置此条件, SQL语句中一定不能有该条件 -->
	<select id="getEmpListByMoreTJ1" resultType="Emp">
		select eid, ename, age, sex, did from emp 
		<where>
			<if test="eid != null">
				eid = #{eid}
			</if>
			<if test="ename != null and ename !=''">
				ename = #{ename}
			</if>
			<if test="age != null">
				age = #{age}
			</if>
			<if test="sex == '1' or sex == '0'">
				sex = #{sex}
			</if>
		</where>
	</select>
	
	<select id="getEmpListByMoreTJ" resultType="Emp">
		<include refid="empColumns"></include>
		<trim prefix="where" suffixOverrides="and|or">
			<if test="eid != null">
				eid = #{eid} and
			</if>
			<if test="ename != null and ename !=''">
				ename = #{ename} and
			</if>
			<if test="age != null">
				age = #{age} or
			</if>
			<if test="sex != null">
				sex = #{sex}
			</if>
		</trim>
	</select>
	
	<!-- 
		<choose>: 选择某一个when或otherwise执行
			<when test=""></when>: 通过test表达式拼接SQL
			.
			.
			.
			<otherwise></otherwise>: 当when都不符合条件, 就会选择otherwise拼接SQL
		</choose>
	 -->
	
	<!-- List<Emp> getEmpListByChoose(Emp emp); -->
	<select id="getEmpListByChoose" resultType="Emp">
		select eid, ename, age, sex from emp
		where
		<choose>
			<when test="eid != null">
				eid = #{eid}
			</when>
			<when test="ename != null and ename != ''">
				ename = #{ename}
			</when>
			<when test="age != null">
				age = #{age}
			</when>
			<otherwise>
				sex = #{sex}	
			</otherwise>
		</choose>
	</select>
	
	<!-- void insertEmp(Emp emp); -->
	<insert id="insertEmp">
		insert into emp(eid, ename, age, sex) values(
			null,
			#{ename},
			#{age},
			<choose>
				<when test="sex == 0">'female'</when>
				<when test="sex == 1">'male'</when>
				<otherwise>'unknown'</otherwise>
			</choose>
		)
	</insert>
	
	<!-- void deleteMoreEmp(String eids); -->
	<delete id="deleteMoreEmp">
		delete from emp where eid in (${value})
	</delete>
	
	<!-- 
		<foreach>: 对一个数组或集合进行遍历
		collection: 指定要遍历的集合或数组
		item: 设置别名
		close: 设置循环体的结束内容
		open: 设置循环体的开始内容
		separator: 设置每一次循环之间的分隔符
		index: 若遍历的是list, index代表下标, 若遍历的是map, index代表键
	 -->
	
	<!-- void deleteMoreByList(List<Integer> eids); -->
	<delete id="deleteMoreByList">
		<!-- delete from emp where eid in 
		<foreach collection="list" item="eid" separator="," open="(" close=")">
			#{eid}
		</foreach> -->
		delete from emp where
		<foreach collection="eids" item = "eid" separator=" or ">
			eid = #{eid}
		</foreach>
	</delete>
	
	<!-- 
		delete: 
			delete from emp where eid in ();
			delete from emp where eid = 1 or eid = 2 or eid = 3; 
		select: 
			select * from emp where eid in ();
			select * from emp where eid = 1 or eid = 2 or eid = 3; 
		update:
			把每条数据修改为相同内容: 
			update emp set ... where eid in ();
			update emp set ... where eid = 1 or eid = 2 or eid = 3; 
			把每条数据修改为对应内容, 注意: 必须在连接地址(url)后加参数allowMultiQueries
		insert:
			insert into emp values(), (), ();
	 -->
	
	<!-- void insertMoreByArray(Emp[] emps); -->
	<insert id="insertMoreByArray">
		insert into emp values
		<foreach collection="emps" item="emp" separator=",">
			(null, #{emp.ename}, #{emp.age}, #{emp.sex}, 1)
		</foreach>
	</insert>
	
	<!-- void updateMoreByArray(@Param("emps")Emp[] emps); -->
	<update id="updateMoreByArray">
		<foreach collection="emps" item="emp">
			update emp set ename = #{emp.ename}, age = #{emp.age}, sex = #{emp.sex} where eid = #{emp.eid};
		</foreach>
	</update>
</mapper>